import java.util.Arrays;

public class Rotatein_AntiClockwaise {
    public static void reverse(int arr[][]) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int start = 0;
            int end = arr[0].length - 1;
            while (start < end) {
                int temp = arr[i][start];
                arr[i][start] = arr[i][end];
                arr[i][end] = temp;
                start++;
                end--;
            }
        }
    }

    public static void rotateBteerway(int[][] arr) {

        int n = arr.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < arr[0].length; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }
        // to remate the matrix 90 ! first take the tesnpose of the original matrix and
        // then reverse the matrix
        reverse(arr);

    }

    public static void Rotate(int arr[][]) {
        rotateBteerway(arr);
        rotateBteerway(arr);
        rotateBteerway(arr);

        // rotate the matrix 90 anticlock waise, this means it give same result when
        // rotate the matrix 90 , 3 times in clockwise direction //
    }




    // this is diffrent approach 1st take the tesnspaose of original and then
    // reverse column wise
    public static void roatematrix90_anticlockwise_Optimize(int arr[][]) {
        int row = arr.length;
        for (int i = 0; i < row; i++) {
            for (int j = i + 1; j < arr[i].length; j++) {
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }
        int cols = arr[0].length;
        for (int i = 0; i < cols; i++) {
            int start = 0;
            int end = row - 1;
            while (start < end) {
                int temp = arr[start][i];
                arr[start][i] = arr[end][i];
                arr[end][i] = temp;
                start++;
                end--;
            }
        }

    }







    public static void main(String[] args) {
        int[][] arr = {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 },
                { 13, 14, 15, 16 },

        };
                              // dont run both approach at same time
        // System.out.println("90+90+90=270 or anticlockwise 90: wala approach");
        // Rotate(arr);
    
        System.out.println("first transpose ans colum wise reverse");
        roatematrix90_anticlockwise_Optimize(arr);
        for (int i = 0; i < arr.length; i++) {
            System.out.println(Arrays.toString(arr[i]));
        }
    }

}


Overall Time and Space Complexity (for both approaches):
Time Complexity: O(NÂ²)
Space Complexity: O(1) (in-place)
