
import java.util.*;

public class RotateMatrix180 {
    public static int[][] Rotate180(int arr[][]) {
        int row = arr.length;
        int cols = arr[0].length;
                                   // coloum waise reverse
        for (int j = 0; j < cols; j++) {
            int start = 0;
            int end = row - 1;
            while (start < end) {
                int temp = arr[start][j];
                arr[start][j] = arr[end][j];
                arr[end][j] = temp;
                start++;
                end--;
            }
        }
                                      //row wise reverse
        for (int i = 0; i < row; i++) {
            int start = 0;
            int end = arr[0].length - 1;
            while (start < end) {
                int temp = arr[i][start];
                arr[i][start] = arr[i][end];
                arr[i][end] = temp;
                start++;
                end--;
            }
        }
        // row wise reverse
        return arr;
    }

    public static void main(String[] args) {
        int arr[][] = {
                { 1, 2, 3 },
                { 4, 5, 6 },
                { 7, 8, 9 },

        };
        int[][] answermartix = Rotate180(arr);
        System.out.println("Rotated array :- ");
        for (int i = 0; i < answermartix.length; i++) {
            System.out.println(Arrays.toString(answermartix[i]));
        }
    }
}


Output :-
               Rotated array :- 
                  [9, 8, 7]
                  [6, 5, 4]
                  [3, 2, 1]

âœ…Approach :- 
> First, you reverse the matrix **column-wise** by swapping elements from top to bottom in each column.
> Then, you reverse the matrix **row-wise** by swapping elements from left to right in each row.
> Together, these two steps rotate the matrix by **180 degrees** in-place, without using extra space.


| Aspect               | Complexity        | Explanation                                                             |
| -------------------- | ----------------- | ----------------------------------------------------------------------- |
| **Time Complexity**  | `O(n * m)`        | Each element is swapped exactly twice: once column-wise, once row-wise. |
| **Space Complexity** | `O(1)` (in-place) | No extra space used; swaps are done in-place in the given matrix.       |
