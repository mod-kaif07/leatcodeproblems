class Solution {
    public int mySqrt(int x) {
        if(x==0) return 0;
        if(x==1) return 1;
        int start=1;
        int end=x;
        int ans=0;
        while(start<=end){
            int mid=start+(end-start)/2;
           
            if(mid==x/mid){                 //mid*mid==x(why we cant like this to prevent from int overflow )
             ans=mid;
             break;
            }
            else if(mid < x/mid){                //mid*mid < x
                  ans=mid;
                  start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return ans;

        
    }
}

| **Aspect**           | **Complexity** | **Explanation**                            |
| -------------------- | -------------- | ------------------------------------------ |
| **Time Complexity**  | `O(log x)`     | Binary search halves the range each step   |
| **Space Complexity** | `O(1)`         | Uses only a few variables (no extra space) |
