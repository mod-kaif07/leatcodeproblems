public class Middleoflinklist {
    class Node {
        int data;
        Node next;

        Node(int data, Node next) {
            this.data = data;
            this.next = next;
        }

        Node(int data) {
            this.data = data;
            this.next = null;
        }

    }

    private static Node head;
    private static Node tail;

    public void addvalue(int data) { // addlast i have add linklsit in sequence
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }

    }

    // find middle of linklist optimze approach  // SLOW AND FAST APPROACH
    public Node middlelinklist(Node head) {
        Node slow = head;
        Node fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    // find middle of linklist brute force approach
    public Node midlevalue(Node head) {
        int count = 0;
        Node temp = head;
        while (temp != null) {
            temp = temp.next;
            count++;

        }
        int idex=count/2;
        temp =head;
        while (idex > 0 && temp!=null) {
            temp=temp.next;
            idex--;
        }
        return temp;
    }

    public void print() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static void main(String[] args) {
        Middleoflinklist rs = new Middleoflinklist();
        int arr[] = { 2, 4, 6, 8, 10,12 };
        for (int i = 0; i < arr.length; i++) {
            rs.addvalue(arr[i]);
        }
        System.out.print("Original linklsit: ");
        rs.print();
        Node mid = rs.middlelinklist(head);
        System.out.println("Middle element by optimze approach  :" + mid.data);

         Node mid2 = rs.midlevalue(head);
        System.out.println("Middle element by brute force   :" + mid2.data);

    }

}

Output:- 
Original linklsit: 2 -> 4 -> 6 -> 8 -> 10 -> 12 -> null
Middle element by optimze approach  :8
Middle element by brute force   :8


OPTIMIZE APPROACH :------
Time Complexity:
O(n/2) ⇒ Simplifies to O(n)
(You traverse the list once with fast moving two steps at a time and slow one step)

✅ Space Complexity:
O(1)
(No extra space is used except a few pointers)


BRUTEFORCE APPROACH :----------
 Time Complexity:
O(n) + O(n/2) ⇒ Simplifies to O(n)
(First pass counts nodes, second pass goes to the middle)

✅ Space Complexity:
O(1)
(No extra space used — only integer counters and pointers)
