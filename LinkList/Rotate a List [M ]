public class RotatetheLinkkist {

    class Node {
        int data;
        Node next;

        public Node(int data, Node next) {
            this.data = data;
            this.next = next;
        }

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private static Node head;
    private static Node tail;

    public void add(int data) {
        Node newNode = new Node(data);

        if (head == null) {
            head = tail = newNode;
            return;
        }
        newNode.next = head;
        head = newNode;
    }

    public void print() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public Node rotateNode(Node head, int k) {
        int totalcount = 0;
        Node curr = head;
        while (curr != null) {
            curr = curr.next;
            totalcount++;
        }
        curr = head;
        k = k % totalcount; // prevent when we have k greater then total count (k=7,total node 6:- 6-7= -1
                            // give error OR 7%6== 1(NO NEGATIVE ) )
        int i = totalcount - k;
        Node pre = null;
        while (i != 0) {
            pre = curr;
            curr = curr.next;
            i--;

        }
        pre.next = null;
        Node temp = curr; // yeh temp value last taak jayega aur isko head sai connect karega
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = head;
        head = curr;

        return head;
    }

    public static void main(String[] args) {
        RotatetheLinkkist re = new RotatetheLinkkist();
        int arr[] = { 1, 2, 3, 4, 5, 6 };
        for (int i = arr.length - 1; i >= 0; i--) {
            re.add(arr[i]);
        }
        System.out.print("Original list: ");
        re.print();

        re.head = re.rotateNode(head, 2);
         System.out.print("Rotated list: ");
        re.print();

    }
}

output:-------------------------
Original list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> null
Rotated list: 5 -> 6 -> 1 -> 2 -> 3 -> 4 -> null
