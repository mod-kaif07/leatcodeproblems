import java.util.*;

public class QueueExample {
    public static void main(String[] args) {
        // Create a Queue using LinkedList
        Queue<String> queue = new LinkedList<>();

        // ----- Adding Elements -----
        queue.add("A");       // Throws exception if full
        queue.offer("B");     // Returns false if full
        queue.add("C");
        queue.offer("D");

        System.out.println("Queue after adding elements: " + queue);

        // ----- Accessing (Head) Elements -----
        System.out.println("Element (head): " + queue.element());  // Throws exception if empty
        System.out.println("Peek (head): " + queue.peek());        // Returns null if empty

        // ----- Removing Elements -----
        System.out.println("Removed (remove): " + queue.remove()); // Removes head (throws exception if empty)
        System.out.println("Removed (poll): " + queue.poll());     // Removes head (returns null if empty)

        System.out.println("Queue after removals: " + queue);

        // ----- More Operations -----
        queue.offer("E");
        queue.offer("F");

        System.out.println("Queue after offering more elements: " + queue);
        System.out.println("Peek element: " + queue.peek());
        System.out.println("Contains 'E'? " + queue.contains("E"));
        System.out.println("Queue size: " + queue.size());
        System.out.println("Is queue empty? " + queue.isEmpty());

        // ----- Iterating through Queue -----
        System.out.println("\nIterating through queue:");
        for (String item : queue) {
            System.out.println(item);
        }

        // ----- Clear the Queue -----
        queue.clear();
        System.out.println("\nAfter clear: " + queue);
    }
}




Queue after adding elements: [A, B, C, D]
Element (head): A
Peek (head): A
Removed (remove): A
Removed (poll): B
Queue after removals: [C, D]
Queue after offering more elements: [C, D, E, F]
Peek element: C
Contains 'E'? true
Queue size: 4
Is queue empty? false

Iterating through queue:
C
D
E
F

After clear: []
