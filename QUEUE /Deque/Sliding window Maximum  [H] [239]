
import java.util.*;

public class sliding_window_maximun {

    public static int maxvalue(Queue<Integer> queue) {
        int max = Integer.MIN_VALUE;
        for (int num : queue) {
            if (num > max) {
                max = num;
            }
        }

        return max;
    }

    public static int[] maxSlidingWindow(int arr[], int k) {
        int n = arr.length;
        int[] answerarr = new int[n - (k - 1)];

        if (n == 1) {
            return new int[] { arr[0] };
        }
        Queue<Integer> queue = new LinkedList<>();

        for (int i = 0; i < k; i++) {
            queue.add(arr[i]);
        }
        int arrindex = 0;
        answerarr[arrindex++] = maxvalue(queue);

        for (int i = k; i < n; i++) {

            queue.remove(arr[i - k]);

            queue.add(arr[i]);

            answerarr[arrindex++] = maxvalue(queue);
        }
        return answerarr;

    }

    public static int[] maxSlidingWindow_optimize(int arr[], int k){
         int n = arr.length;
        if (n == 0 || k == 0) return new int[0];

        Deque<Integer> deque = new ArrayDeque<>();
        int[] answerarr = new int[n - k + 1];
        int index = 0;

        for (int i = 0; i < n; i++) {
            // Remove indices out of current window
            while (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.removeFirst();
            }

            // Remove smaller elements (not useful)
            while (!deque.isEmpty() && arr[i] >= arr[deque.peekLast()]) {
                deque.removeLast();
            }

            // Add current index
            deque.addLast(i);

            // Store result once we have first full window
            if (i >= k - 1) {
                answerarr[index++] = arr[deque.peekFirst()];
            }
        }

        return answerarr;
    
    }

    public static void main(String[] args) {
        int arr[] = { 1,3,-1,-3,5,3,6,7 };
        int k = 3;
        int[] result = maxSlidingWindow(arr, k);
        int[] result2 = maxSlidingWindow_optimize(arr, k);
        System.out.println("Time complexity O(N*K)"+Arrays.toString(result));
        System.out.println("Time complexity O(N)"+Arrays.toString(result2));

    }
}
