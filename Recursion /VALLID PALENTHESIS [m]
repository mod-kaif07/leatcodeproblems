class Solution {
     private void generate(int n, List<String> result, StringBuilder current, int left, int right) {
        if (left == n && right == n) {
           result.add(current.toString());
            return;
        }

        //left parehtesis
        if (left < n) {
           current.append("(");
            generate(n, result, current, left + 1, right);
           current.deleteCharAt(current.length() - 1); 
        }
        //right parethseis
         if (right < left) {
            current.append(")");
            generate(n, result, current, left, right + 1);
            current.deleteCharAt(current.length() - 1); // backtrack
        }

    }

    public List<String> generateParenthesis(int n) {
       List<String> result = new ArrayList<>();
        generate(n, result, new StringBuilder(), 0, 0);
        return result;
    }
}



//////////////////////    Vs Code Solution ////////////////////////////////////////////////////


import java.util.ArrayList;
import java.util.List;

public class Valid_Palethesis {

    public static void pallenthsise(List<String> ans, int n, int left, int right, StringBuilder temp) {

        if (left == n && right == n) {
            ans.add(temp.toString());
            return;
        }

        // left baraket first
        if (left < n) {
            temp.append('(');
            pallenthsise(ans, n, left + 1, right, temp);
         temp.deleteCharAt(temp.length() - 1);
        }

        // right Bracked
        if (right < left) {
            temp.append(')');
            pallenthsise(ans, n, left, right + 1, temp);
           temp.deleteCharAt(temp.length() - 1);

        }

    }

    public static List<String> valid(int n) {
        int left = 0;
        int right = 0;
        List<String> result = new ArrayList<>();

        pallenthsise(result, n, left, right, new StringBuilder());
        return result;
    }

    public static void main(String[] args) {
        int n = 3;
        List<String> ans = valid(n);
        System.out.println("Valid Palethesis" + ans);
        int count=0;
        for(int i=0;i<ans.size();i++){
            count++;
        }
        System.out.println(count);
    }
}
