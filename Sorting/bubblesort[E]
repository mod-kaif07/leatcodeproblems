import java.lang.reflect.Array;
import java.util.Arrays;

public class SelectionSort {
    public static int[] sort(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int idex = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[idex] > arr[j]) {
                    idex = j;
                }

            }

            int temp = arr[i];
            arr[i] = arr[idex];
            arr[idex] = temp;

        }
        return arr;
    }

    public static void main(String[] args) {
        int arr[] = { 9, 7, 3, 1, 6 };
        int sortarr[] = sort(arr);
        System.out.println(Arrays.toString(sortarr));
    }
}


| Case    | Time Complexity | Space Complexity |
| ------- | --------------- | ---------------- |
| Best    | O(n)            | O(1)             |
| Average | O(n²)           | O(1)             |
| Worst   | O(n²)           | O(1)             |
