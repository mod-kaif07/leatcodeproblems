import java.util.ArrayList;
import java.util.Stack;

public class maxium_rectangle {
    public static int rechatngle(int arr[]) {
        ArrayList<Integer> right = new ArrayList<>();
        ArrayList<Integer> left = new ArrayList<>();
        Stack<Integer> st = new Stack<>();

        for (int i = 0; i < arr.length; i++) {
            right.add(arr.length); // Initially assume rightmost boundary
            left.add(-1); // Initially assume leftmost boundary
        }
        for (int i = 0; i < arr.length; i++) {
            while (!st.isEmpty() && arr[i] < arr[st.peek()]) {
                right.set(st.peek(), i);
                st.pop();

            }
            st.push(i);
        }

        while (!st.isEmpty()) {
            right.set(st.peek(), arr.length);
            st.pop();
        }

        st.clear();

        for (int i = arr.length - 1; i >= 0; i--) {
            while (!st.isEmpty() && arr[i] < arr[st.peek()]) {
                left.set(st.peek(), i);
                st.pop();

            }
            st.push(i);
        }

        int maxarea = 0;

        for (int i = 0; i < arr.length; i++) {
            int value = (arr[i]) * (right.get(i) - left.get(i) - 1);
            maxarea = Math.max(maxarea, value);

        }
        return maxarea;
    }

    public static int maxium(int arr[][]) {
        int ans = 0;
        int row = arr.length;
        int col = arr[0].length;
        int newrr[] = new int[col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (arr[i][j] == 0) {
                    newrr[j] = 0;
                } else {
                    newrr[j] = newrr[j] + 1; // accumulate heights
                }
            }
            ans = Math.max(ans, rechatngle(newrr));
        }
        return ans;
    }

    public static void main(String[] args) {
        int arr[][] = {
                { 1, 0, 1, 0, 0 },
                { 1, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1 },
                { 1, 0, 0, 1, 0 }
        };
        int area = maxium(arr);
        System.out.println(area);

    }
}
