import java.util.*;

public class T3SUM_array {
    public static boolean hasTripletSum(int arr[], int target) {
        // Brute FOrce approach
        int n = arr.length;
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    int sum = arr[i] + arr[j] + arr[k];
                    if (sum == target) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

                      ////////////////// TWO POINTER APPROACH    /////////////////////////////////

public static boolean hasTripletSum_twopointer(int arr[], int target) {
        int n = arr.length;
        for (int i = 0; i < n; i++) {
            int actual_emelent_find_after_first_element = target - arr[i];
            int start = i + 1;
            int end = n - 1;
            while (start < end) {
                int sum = arr[start] + arr[end];
                if (actual_emelent_find_after_first_element == sum) {
                    return true;
                } else if (sum > actual_emelent_find_after_first_element) {
                    end--;
                } else {
                    start++;
                }

            }

        }

        return false;
    }

    public static void main(String[] args) {
        int arr[] = { 1, 6, 4, 8, 45, 10 };
        Arrays.sort(arr);
        boolean check = hasTripletSum(arr, 24);
        System.out.println(Arrays.toString(arr));
        System.out.println(check);

        boolean check2 = hasTripletSum_twopointer(arr, 24);
        System.out.println(check2);
    }

}

}


| Approach             | Sort Time Complexity | Main Logic Time Complexity | **Total Time Complexity** | Space Complexity |
| -------------------- | -------------------- | -------------------------- | ------------------------- | ---------------- |
| Brute Force          | ❌ Not needed        | O(n³)                     | **O(n³)**                 | O(1)             |
| Two Pointer (Sorted) | O(n log n)           | O(n²)                      | **O(n²)**                 | O(1)             |

