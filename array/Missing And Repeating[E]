APPROACH 1:-----------------------------------------------------------------
class Solution {
    ArrayList<Integer> findTwoElement(int arr[]) {
        // code here
        int n= arr.length;
          ArrayList<Integer> result = new ArrayList<>();
          for(int i=0;i<n;i++){
              arr[i]--;
          }
          for(int i=0;i<n;i++){
               arr[arr[i] % n] += n;
          }
          //repating
          
           int repeating = -1, missing = -1;
        for (int i = 0; i < n; i++) {
            int freq = arr[i] / n;

            if (freq == 2) repeating = i + 1;
            if (freq == 0) missing = i + 1;
        }

        result.add(repeating);
        result.add(missing);
        return result;
        
    }
} 
        
TC = O(n) + O(n) + O(n) = O(n)
SC = O(1)   // Ignoring output list size
| Metric           | Complexity |
| ---------------- | ---------- |
| Time Complexity  | `O(n)`     |
| Space Complexity | `O(1)`     |


        
        
        
        
  APPROACH 2:-----------------------------------------------------------------
class Solution {
    ArrayList<Integer> findTwoElement(int arr[]) {
        // code here
         int answerarr[]=new int  [arr.length+1];
             ArrayList<Integer> list = new ArrayList<>();
        for(int i=0;i<arr.length;i++){
            answerarr[arr[i]]++;
        }
       
        
        for(int i=1;i<=arr.length;i++){
            if(answerarr[i]==0){
                list.add(i);
            }
            else if(answerarr[i]>1){
                list.add(0,i);
            }
        }
        return list;
    }
}

                          |       Input: arr[] = [2, 2]
                          |        Output: [2, 1]
                          |    Explanation: Repeating number is 2 and the missing number is 1.

| Complexity Type      | Value  |
| -------------------- | ------ |
| **Time Complexity**  | `O(n)` |
| **Space Complexity** | `O(n)` |
