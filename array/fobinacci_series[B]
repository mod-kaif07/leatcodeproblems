    //USING ARRAY LIST 
leatcode 509 

class Solution {
    public int fib(int n) {

        if (n == 0) return 0;
        if (n == 1) return 1;
        int [] arr= new int [n+1];
        arr[0]=0;
        arr[1]=1;
     for(int i=2;i<=n;i++){
           arr[i]=arr[i-1]+arr[i-2];
            
        }
       return arr[n];
    }
}


/////////////////////////////////////////////////////////////////////////////////////////

import java.util.ArrayList;

public class fobinacciseries {
    public static ArrayList fobanciseriesprint(int n) {
        ArrayList<Integer> newArr = new ArrayList<>();
        if (n <= 0)
            return newArr;
        newArr.add(0);
        if (n == 1) return newArr;
        newArr.add(1);
        for(int i=2;i<n;i++){
            int next= newArr.get(i-1)+newArr.get(i-2);
            newArr.add(next);
        }

        return newArr;
    }

    public static void main(String[] args) {
        int n = 5;
        ArrayList answerarr = fobanciseriesprint(n);
        System.out.println(answerarr);
    }
}

TIME COMPLEXIBITY | Operation                              | Time                   |
| -------------------------------------- | ---------------------- |
| `newArr.add(0)`                        | O(1)                   |
| `newArr.add(1)`                        | O(1)                   |
| Loop from `i = 2` to `n-1`             | O(n - 2) â‰ˆ O(n)        |
| Each `.get()` and `.add()` inside loop | O(1) each â†’ O(n) total |


So the total time complexity is:

âœ… O(n)

Because:

We do n constant-time operations.

No nested loops or recursion involved.

ðŸ§  Space Complexity:
You're storing n elements in the ArrayList, so:

âœ… Space Complexity: O(n)





