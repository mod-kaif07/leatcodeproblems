
import javax.swing.plaf.metal.MetalTheme;

public class largestSumContigious_Subarray {
    public static int maxsubarraysum(int arr[]) {
        int maxsum = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {

            for (int j = i; j < arr.length; j++) {
                int cuusum = 0;
                for (int k = i; k <= j; k++) {
                    cuusum = cuusum + arr[k];
                }
                if (cuusum > maxsum) {
                    maxsum = cuusum;
                }

            }
        }
        return maxsum;

    }

    public static int maxsubarrayoptimize(int arr[]) {
        int maxsum = Integer.MIN_VALUE;
        int prefixsum = arr[0];
        for (int i = 0; i < arr.length; i++) {
            prefixsum = 0;
            for (int j = i + 1; j < arr.length; j++) {
                prefixsum += arr[j];

                if (prefixsum > maxsum) {
                    maxsum = prefixsum;
                }
            }

        }
        return maxsum;
    }


  /////////////////  IMPORTANT ///////////////////////////////////////////////////////////////////////////
public static int mostoptimize(int arr[]) {   //(Kadane’s Algorithm)

        int maxsum = Integer.MIN_VALUE;
        int prefix = 0;
        for (int i = 0; i < arr.length; i++) {
            prefix = prefix + arr[i];
            maxsum = Math.max(maxsum, prefix);
            if (prefix < 0) {
                prefix = 0;
            }
        }
        return maxsum;
    }

    public static void main(String[] args) {
        int arr[] = { 3, 4, -5, 8, -12, 7, 6, -2 };
        int maxsum = maxsubarraysum(arr);
        System.out.println("BRUTE FORCE APPROACH:-" + maxsum);

        int maxsu2 = maxsubarrayoptimize(arr);
        System.out.println("OPTIMIZE APPROACH:-" + maxsu2);

        int maxsu3 = mostoptimize(arr);
        System.out.println("MOST_OPTIMIZE APPROACH:-" + maxsu3);
    }
}




| Approach           | Time Complexity | Space Complexity |
| ------------------ | --------------- | ---------------- |
| Brute Force        | O(n³)           | O(1)             |
| Optimized (Prefix) | O(n²)           | O(1)             |
| Kadane’s (Best)    | O(n)            | O(1)             |
