O(n) Sliding Window

class Solution {
    public int lengthOfLongestSubstring(String s) {
        boolean[] arr = new boolean[256]; // ASCII characters
        int first = 0;
        int second = 0;
        int length = 0;

        while (second < s.length()) {
            char ch = s.charAt(second);

            if (!arr[ch]) {
                arr[ch] = true;
                length = Math.max(length, second - first + 1);
                second++;
            } else {
                // remove the leftmost character from the window
                arr[s.charAt(first)] = false;
                first++;
            }
        }

        return length;
    }
}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//better approcach 0(N^2);
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxlength =0;
        
        for(int i =0;i<s.length();i++){
            int []freq= new int[256];
            int length=0;
            for(int j=i;j<s.length();j++){
                char c=s.charAt(j);
                if( freq[c]==1){
                    break;
                }
                else{
                    freq[c]=1;
                    length++;
                    maxlength=Math.max(maxlength,length);
                }
            }
        }
        return maxlength;
    }
}
