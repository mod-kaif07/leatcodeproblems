import java.util.Stack;

public class valid_palethesis {
    public static boolean valid(String str) {
        if (str.length() == 0) {
            return true;
        }
        if (str.length() == 1) {
            return false;
        }
        char[] chars = str.toCharArray();
        Stack<Character> st = new Stack<>();
        for (int i = 0; i < str.length(); i++) {
            char ch = chars[i];
            if (ch == '(' || ch == '{' || ch == '[') {
                st.push(chars[i]);
            } else if (!st.isEmpty()) {
                if (!st.isEmpty()) {
                    char top = st.pop();
                    if (ch == ')' && top != '(') {
                        return false;
                    } else if (ch == '}' && top != '{') {
                        return false;
                    } else if (ch == ']' && top != '[') {
                        return false;
                    }
                }
            } else if (ch == ')' || ch == '}' || ch == ']') {
                return false;
            }

        }
        return st.isEmpty();
    }

    public static void main(String[] args) {
        String str = "()";
        Boolean cheked = valid(str);
        System.out.println("Valid Parentheses :" + cheked);
    }
}
