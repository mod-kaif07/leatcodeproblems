// BRUTE FORCE APPROCH 

public class longesrprefex {
    public static int longesrprefex(String str) {
        int maxLength = 0;
        int n = str.length();
        
        // Try all possible prefix lengths (except the full string)
        for (int i = 1; i < n; i++) {
            String prefix = str.substring(0, i);
            String suffix = str.substring(n - i, n);
            
            if (prefix.equals(suffix)) {
                maxLength = Math.max(maxLength, i);
            }
        }
        
        return maxLength;
    }

    public static void main(String[] args) {
        String str = "ABCDEABCD";
        int value = longesrprefex(str);
        System.out.println(value);                                                                   // Output: 4
    }
}

    Total = O(1 + 2 + 3 + ... + (n-1))
      = O(n(n-1)/2)
      = O(nÂ²)
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  youtube viedo :-   https://youtu.be/sODA1BzFvsE?si=5Pf7ZZa5qd21Ke29
//optimize approch  KMP algorithum 
class Solution {
    int longestPrefixSuffix(String s) {
          int n = s.length();
        int [] arr= new int[n];
        int prefix=0;
        int suffix=1;
        while(suffix< n){
            if(s.charAt(prefix)==s.charAt(suffix)){
                arr[suffix]=prefix+1;
                suffix++;
                prefix++;
            }
            else{
                if(prefix == 0){
                    arr[suffix]=0;
                    suffix++;
                }
                else{
                    prefix= arr[prefix-1];
                }
            }
        }
        
        return arr[n-1];
        
    }
}
